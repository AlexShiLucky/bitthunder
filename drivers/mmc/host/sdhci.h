#ifndef _SDHCI_H_
#define _SDHCI_H_

#include <bitthunder.h>

typedef struct _SDHCI_REGS {
	BT_u32	SDMA_Address;
	BT_u32	BLOCK_SIZE_COUNT;
	BT_u32	ARGUMENT;
	BT_u32	TRANSFERMODE_COMMAND;
	BT_u32	RESPONSE[4];
	BT_u32	BUFFER_DATA_PORT;
	BT_u32	PRESENT_STATE;
	BT_u32	H_PWR_BLK_WK_CONTROL;
	BT_u32	CLOCK_TO_SRESET_CONTROL;
	BT_u32	NORMAL_ERROR_INTSTAT;			///< Interrupt Status regs.
	#define NORMAL_INT_COMMAND_COMPLETE		0x00000001
	#define NORMAL_INT_TRANSFER_COMPLETE	0x00000002
	#define NORMAL_INT_BLOCK_GAP_EVENT 		0x00000004
	#define NORMAL_INT_DMA 					0x00000008
	#define NORMAL_INT_BUF_WRITE_READY 		0x00000010
	#define NORMAL_INT_BUF_READ_READY 		0x00000020
	#define NORMAL_INT_CARD_INSERTED 		0x00000040
	#define NORMAL_INT_CARD_REMOVED 		0x00000080
	#define NORMAL_INT_CARD 				0x00000100
	#define NORMAL_INT_ERROR	 			0x00008000

	BT_u32	NORMAL_ERROR_INTSTAT_EN;
	BT_u32	NORMAL_ERROR_INTSIG_EN;
	BT_u32	AUTO_CMD12_ERROR;
	BT_u32	CAPABILITIES;
	BT_u32	reserved_caps_0;
	BT_u32	MAX_CURRENT_CAPS;
	BT_u32	FORCE_EVENT_AUTO_CMD12;
	BT_u32	ADMA_ERROR_STATUS;
	BT_u32	ADMA_SYS_ADDRESS;
	BT_u32	reserved_1;
	BT_u32	BOOT_TIMEOUT;
	BT_u32	DEBUG_SELECTION;
	BT_STRUCT_RESERVED_u32(2, 0x64, 0xF0);
	BT_u32	SPI_INTERRUPT_SUPPORT;
	BT_STRUCT_RESERVED_u32(3, 0xF0, 0xFC);
	BT_u32	SLOT_INT_STAT_HCVERSION;
} SDHCI_REGS;



















#endif
